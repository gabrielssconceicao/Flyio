// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid())
  name       String
  username   String   @unique
  email      String   @unique
  password   String
  bio        String?
  profileImg String?
  active     Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  posts     Post[]
  PostLikes PostLikes[]
  following Follower[]  @relation("Following")
  followers Follower[]  @relation("Followers")
}

model Post {
  id        String       @id @default(uuid())
  content   String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  userId    String
  user      User         @relation(fields: [userId], references: [id])
  images    PostImages[]
  PostLikes PostLikes[]
}

model PostImages {
  id        String   @id @default(uuid())
  url       String
  postId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model PostLikes {
  postId String
  userId String

  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([postId, userId])
}

model Follower {
  followerId String
  followedId String

  follower User @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)
  followed User @relation("Followers", fields: [followedId], references: [id], onDelete: Cascade)

  @@id([followerId, followedId]) // Chave prim√°ria composta
}
